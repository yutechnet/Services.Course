// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BpeProducts.Services.Course.Host.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LearningOutcomeManagement")]
    [NUnit.Framework.CategoryAttribute("Api")]
    public partial class LearningOutcomeManagementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LearningOutcomeManagement.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LearningOutcomeManagement", "In order to specify the expected outcome of a course or program\r\nAs a course buil" +
                    "der or program coordinator\r\nI want to manage learning outcomes", ProgrammingLanguage.CSharp, new string[] {
                        "Api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 32
#line 33
testRunner.Given("I am user \"TestUser3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ParentOrganization"});
            table1.AddRow(new string[] {
                        "COB",
                        "Bus School",
                        ""});
#line 34
testRunner.And("the following organizations exist", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Organization",
                        "Capabilities"});
            table2.AddRow(new string[] {
                        "Role1",
                        "COB",
                        "CourseCreate"});
#line 37
testRunner.And("I create the following roles", ((string)(null)), table2, "And ");
#line 40
testRunner.And("I give the user role \"Role1\" for organization COB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName"});
            table3.AddRow(new string[] {
                        "BA",
                        "BA Program",
                        "BA",
                        "COB"});
#line 41
testRunner.Given("I have the following programs", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationName"});
            table4.AddRow(new string[] {
                        "English 101",
                        "ENG101",
                        "Ranji\'s awesome English class",
                        "COB"});
#line 44
testRunner.And("I have the following courses", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a new leanring outcome and get it")]
        public virtual void AddANewLeanringOutcomeAndGetIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a new leanring outcome and get it", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table5.AddRow(new string[] {
                        "SomeDescription"});
#line 8
 testRunner.Given("I have the following learning outcomes", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Description",
                        "SomeDescription"});
#line 11
 testRunner.Then("the learning outcome \'SomeDescription\' should contain", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit an existing learning outcome and get it")]
        public virtual void EditAnExistingLearningOutcomeAndGetIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit an existing learning outcome and get it", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table7.AddRow(new string[] {
                        "SomeDescription"});
#line 16
 testRunner.Given("I have the following learning outcomes", ((string)(null)), table7, "Given ");
#line 19
 testRunner.When("I change the \'SomeDescription\' learning outcome description to \'OtherDescription\'" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table8.AddRow(new string[] {
                        "OtherDescription"});
#line 20
 testRunner.Then("the learning outcome \'SomeDescription\' should contain", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete an existing learning outcome")]
        public virtual void DeleteAnExistingLearningOutcome()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete an existing learning outcome", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table9.AddRow(new string[] {
                        "SomeDescription"});
#line 25
 testRunner.Given("I have the following learning outcomes", ((string)(null)), table9, "Given ");
#line 28
 testRunner.When("I delete the \'SomeDescription\' learning outcome", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.And("I get the learning outcome \'SomeDescription\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.Then("I get \'NotFound\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Associate a new learning outcome to a program")]
        public virtual void AssociateANewLearningOutcomeToAProgram()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Associate a new learning outcome to a program", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table10.AddRow(new string[] {
                        "first learning outcome"});
            table10.AddRow(new string[] {
                        "second learning outcome"});
#line 49
 testRunner.Given("I associate the newly created learning outcomes to \'BA\' program", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table11.AddRow(new string[] {
                        "first learning outcome"});
            table11.AddRow(new string[] {
                        "second learning outcome"});
#line 53
 testRunner.Then("\'BA\' program is associated with the following learning outcomes", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Associate a existing learning outcome to a program")]
        public virtual void AssociateAExistingLearningOutcomeToAProgram()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Associate a existing learning outcome to a program", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table12.AddRow(new string[] {
                        "first learning outcome"});
            table12.AddRow(new string[] {
                        "second learning outcome"});
#line 59
 testRunner.Given("I have the following learning outcomes", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table13.AddRow(new string[] {
                        "first learning outcome"});
            table13.AddRow(new string[] {
                        "second learning outcome"});
#line 63
 testRunner.When("I associate the existing learning outcomes to \'BA\' program", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table14.AddRow(new string[] {
                        "first learning outcome"});
            table14.AddRow(new string[] {
                        "second learning outcome"});
#line 67
 testRunner.Then("\'BA\' program is associated with the following learning outcomes", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Duplicate association is idempotent")]
        public virtual void DuplicateAssociationIsIdempotent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate association is idempotent", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table15.AddRow(new string[] {
                        "first learning outcome"});
#line 73
 testRunner.Given("I associate the newly created learning outcomes to \'BA\' program", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table16.AddRow(new string[] {
                        "first learning outcome"});
#line 76
 testRunner.Then("\'BA\' program is associated with the following learning outcomes", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Disassociated a learning outcome from a program")]
        public virtual void DisassociatedALearningOutcomeFromAProgram()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disassociated a learning outcome from a program", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table17.AddRow(new string[] {
                        "first learning outcome"});
            table17.AddRow(new string[] {
                        "second learning outcome"});
#line 81
 testRunner.Given("I associate the newly created learning outcomes to \'BA\' program", ((string)(null)), table17, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table18.AddRow(new string[] {
                        "first learning outcome"});
#line 85
 testRunner.When("I disassociate the following learning outcomes from \'BA\' program", ((string)(null)), table18, "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table19.AddRow(new string[] {
                        "second learning outcome"});
#line 88
 testRunner.Then("\'BA\' program is associated with the only following learning outcomes", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Disassociating non-existing learning outcome")]
        public virtual void DisassociatingNon_ExistingLearningOutcome()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disassociating non-existing learning outcome", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table20.AddRow(new string[] {
                        "first learning outcome"});
            table20.AddRow(new string[] {
                        "second learning outcome"});
#line 93
 testRunner.Given("I associate the newly created learning outcomes to \'BA\' program", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table21.AddRow(new string[] {
                        "third learning outcome"});
#line 97
 testRunner.And("I have the following learning outcomes", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table22.AddRow(new string[] {
                        "first learning outcome"});
            table22.AddRow(new string[] {
                        "second learning outcome"});
            table22.AddRow(new string[] {
                        "third learning outcome"});
#line 100
 testRunner.When("I disassociate the following learning outcomes from \'BA\' program", ((string)(null)), table22, "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "StatusCode"});
            table23.AddRow(new string[] {
                        "NoContent"});
            table23.AddRow(new string[] {
                        "NoContent"});
            table23.AddRow(new string[] {
                        "NotFound"});
#line 105
 testRunner.Then("I get the following responses", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Associate an outcome to another outcome")]
        public virtual void AssociateAnOutcomeToAnotherOutcome()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Associate an outcome to another outcome", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table24.AddRow(new string[] {
                        "PL1"});
            table24.AddRow(new string[] {
                        "CL1"});
            table24.AddRow(new string[] {
                        "CL2"});
#line 112
 testRunner.Given("I have the following learning outcomes", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table25.AddRow(new string[] {
                        "CL1"});
            table25.AddRow(new string[] {
                        "CL2"});
#line 117
 testRunner.When("the outcome \'PL1\' is supported by the following outcomes", ((string)(null)), table25, "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table26.AddRow(new string[] {
                        "CL1"});
            table26.AddRow(new string[] {
                        "CL2"});
#line 121
 testRunner.Then("learning outcome \'PL1\' is supported by the following learning outcomes", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Associate multiple outcomes to another outcome asynchronously")]
        public virtual void AssociateMultipleOutcomesToAnotherOutcomeAsynchronously()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Associate multiple outcomes to another outcome asynchronously", ((string[])(null)));
#line 126
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table27.AddRow(new string[] {
                        "PL1"});
            table27.AddRow(new string[] {
                        "PL2"});
            table27.AddRow(new string[] {
                        "PL3"});
            table27.AddRow(new string[] {
                        "PL4"});
            table27.AddRow(new string[] {
                        "PL5"});
            table27.AddRow(new string[] {
                        "PL6"});
            table27.AddRow(new string[] {
                        "PL7"});
            table27.AddRow(new string[] {
                        "PL8"});
            table27.AddRow(new string[] {
                        "PL9"});
            table27.AddRow(new string[] {
                        "PL10"});
            table27.AddRow(new string[] {
                        "CL1"});
#line 127
 testRunner.Given("I have the following learning outcomes", ((string)(null)), table27, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table28.AddRow(new string[] {
                        "PL1"});
            table28.AddRow(new string[] {
                        "PL2"});
            table28.AddRow(new string[] {
                        "PL3"});
            table28.AddRow(new string[] {
                        "PL4"});
            table28.AddRow(new string[] {
                        "PL5"});
            table28.AddRow(new string[] {
                        "PL6"});
            table28.AddRow(new string[] {
                        "PL7"});
            table28.AddRow(new string[] {
                        "PL8"});
            table28.AddRow(new string[] {
                        "PL9"});
            table28.AddRow(new string[] {
                        "PL10"});
#line 140
 testRunner.When("the outcome \'CL1\' supports the following learning outcomes asynchronously", ((string)(null)), table28, "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table29.AddRow(new string[] {
                        "PL1"});
            table29.AddRow(new string[] {
                        "PL2"});
            table29.AddRow(new string[] {
                        "PL3"});
            table29.AddRow(new string[] {
                        "PL4"});
            table29.AddRow(new string[] {
                        "PL5"});
            table29.AddRow(new string[] {
                        "PL6"});
            table29.AddRow(new string[] {
                        "PL7"});
            table29.AddRow(new string[] {
                        "PL8"});
            table29.AddRow(new string[] {
                        "PL9"});
            table29.AddRow(new string[] {
                        "PL10"});
#line 152
 testRunner.Then("the learning outcome \'CL1\' supports the following learning outcomes", ((string)(null)), table29, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Disassociate an outcome from another outcome")]
        public virtual void DisassociateAnOutcomeFromAnotherOutcome()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disassociate an outcome from another outcome", ((string[])(null)));
#line 166
this.ScenarioSetup(scenarioInfo);
#line 32
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table30.AddRow(new string[] {
                        "PL1"});
            table30.AddRow(new string[] {
                        "CL1"});
            table30.AddRow(new string[] {
                        "CL2"});
#line 167
 testRunner.Given("I have the following learning outcomes", ((string)(null)), table30, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table31.AddRow(new string[] {
                        "CL1"});
            table31.AddRow(new string[] {
                        "CL2"});
#line 172
 testRunner.When("the outcome \'PL1\' is supported by the following outcomes", ((string)(null)), table31, "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table32.AddRow(new string[] {
                        "CL1"});
#line 176
 testRunner.And("I disassociate the following learning outcomes from \'PL1\' learning outcome", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table33.AddRow(new string[] {
                        "CL2"});
#line 179
 testRunner.Then("learning outcome \'PL1\' is supported by the following learning outcomes", ((string)(null)), table33, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
