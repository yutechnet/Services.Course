// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18051
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BpeProducts.Services.Course.Host.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetEntityLearningOutcome")]
    [NUnit.Framework.CategoryAttribute("Api")]
    public partial class GetEntityLearningOutcomeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetEntityLearningOutcomes.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetEntityLearningOutcome", "Given a course, program or segment \r\nAs a program manager\r\nI want to know what Le" +
                    "arningOutcomes are associated with them", ProgrammingLanguage.CSharp, new string[] {
                        "Api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
 testRunner.Given("I am user \"TestUser3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ParentOrganization"});
            table1.AddRow(new string[] {
                        "COB",
                        "Bus School",
                        ""});
#line 9
 testRunner.And("the following organizations exist", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Organization",
                        "Capabilities"});
            table2.AddRow(new string[] {
                        "Role1",
                        "COB",
                        "CourseCreate,CourseView"});
#line 12
 testRunner.And("I create the following roles", ((string)(null)), table2, "And ");
#line 15
 testRunner.And("I give the user role \"Role1\" for organization COB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName"});
            table3.AddRow(new string[] {
                        "Program1",
                        "Program1",
                        "BA",
                        "Default"});
            table3.AddRow(new string[] {
                        "Program2",
                        "Program2",
                        "BS",
                        "Default"});
            table3.AddRow(new string[] {
                        "Program3",
                        "Program3",
                        "MA",
                        "Default"});
#line 16
 testRunner.And("I have the following programs", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationName"});
            table4.AddRow(new string[] {
                        "Course1",
                        "1",
                        "Course1",
                        "COB"});
            table4.AddRow(new string[] {
                        "Course2",
                        "2",
                        "Course2",
                        "COB"});
            table4.AddRow(new string[] {
                        "Course3",
                        "3",
                        "Course3",
                        "COB"});
#line 21
 testRunner.And("I have the following courses", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "Type",
                        "ParentSegment"});
            table5.AddRow(new string[] {
                        "Week1",
                        "First week is slack time",
                        "TimeSpan",
                        ""});
            table5.AddRow(new string[] {
                        "Discussion",
                        "Discussion for the first week",
                        "Discussion",
                        "Week1"});
            table5.AddRow(new string[] {
                        "Discussion2",
                        "Discussion2 for the first week",
                        "Discussion",
                        "Week1"});
            table5.AddRow(new string[] {
                        "Topic",
                        "Topic for a discussion",
                        "Topic",
                        "Discussion"});
#line 26
    testRunner.And("I have the following course segments for \'Course1\'", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table6.AddRow(new string[] {
                        "LO1"});
            table6.AddRow(new string[] {
                        "LO2"});
            table6.AddRow(new string[] {
                        "LO3"});
            table6.AddRow(new string[] {
                        "LO4"});
            table6.AddRow(new string[] {
                        "LO5"});
#line 32
 testRunner.And("I have the following learning outcomes", ((string)(null)), table6, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get entity learning outcomes for programs")]
        public virtual void CanGetEntityLearningOutcomesForPrograms()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get entity learning outcomes for programs", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table7.AddRow(new string[] {
                        "LO1"});
#line 41
 testRunner.When("I associate the existing learning outcomes to \'Program1\' program", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table8.AddRow(new string[] {
                        "LO2"});
            table8.AddRow(new string[] {
                        "LO3"});
#line 44
 testRunner.And("I associate the existing learning outcomes to \'Program2\' program", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityType",
                        "EntityName",
                        "LearningOutcomes"});
            table9.AddRow(new string[] {
                        "Program",
                        "Program1",
                        "LO1"});
            table9.AddRow(new string[] {
                        "Program",
                        "Program2",
                        "LO2, LO3"});
            table9.AddRow(new string[] {
                        "Program",
                        "Program3",
                        ""});
#line 48
 testRunner.Then("I get the entity learning outcomes as follows", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get entity learning outcomes for courses")]
        public virtual void CanGetEntityLearningOutcomesForCourses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get entity learning outcomes for courses", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table10.AddRow(new string[] {
                        "LO1"});
#line 55
 testRunner.When("I associate the existing learning outcomes to \'Course1\' course", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table11.AddRow(new string[] {
                        "LO2"});
            table11.AddRow(new string[] {
                        "LO3"});
#line 58
 testRunner.And("I associate the existing learning outcomes to \'Course3\' course", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityType",
                        "EntityName",
                        "LearningOutcomes"});
            table12.AddRow(new string[] {
                        "Course",
                        "Course1",
                        "LO1"});
            table12.AddRow(new string[] {
                        "Course",
                        "Course2",
                        ""});
            table12.AddRow(new string[] {
                        "Course",
                        "Course3",
                        "LO2, LO3"});
            table12.AddRow(new string[] {
                        "Program",
                        "Program1",
                        ""});
            table12.AddRow(new string[] {
                        "Program",
                        "Program2",
                        ""});
            table12.AddRow(new string[] {
                        "Program",
                        "Program3",
                        ""});
#line 62
 testRunner.Then("I get the entity learning outcomes as follows", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get entity learning outcomes for segments")]
        public virtual void CanGetEntityLearningOutcomesForSegments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get entity learning outcomes for segments", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table13.AddRow(new string[] {
                        "LO1"});
#line 72
 testRunner.When("I associate the existing learning outcomes to \'Week1\' segment", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table14.AddRow(new string[] {
                        "LO1"});
            table14.AddRow(new string[] {
                        "LO2"});
            table14.AddRow(new string[] {
                        "LO3"});
#line 75
 testRunner.When("I associate the existing learning outcomes to \'Topic\' segment", ((string)(null)), table14, "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityType",
                        "EntityName",
                        "LearningOutcomes"});
            table15.AddRow(new string[] {
                        "Segment",
                        "Week1",
                        "LO1"});
            table15.AddRow(new string[] {
                        "Segment",
                        "Topic",
                        "LO1, LO2, LO3"});
            table15.AddRow(new string[] {
                        "Segment",
                        "Discussion",
                        ""});
            table15.AddRow(new string[] {
                        "Segment",
                        "Discussion2",
                        ""});
            table15.AddRow(new string[] {
                        "Course",
                        "Course1",
                        ""});
            table15.AddRow(new string[] {
                        "Course",
                        "Course2",
                        ""});
            table15.AddRow(new string[] {
                        "Course",
                        "Course3",
                        ""});
            table15.AddRow(new string[] {
                        "Program",
                        "Program1",
                        ""});
            table15.AddRow(new string[] {
                        "Program",
                        "Program2",
                        ""});
            table15.AddRow(new string[] {
                        "Program",
                        "Program3",
                        ""});
#line 80
 testRunner.Then("I get the entity learning outcomes as follows", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify a course version can be created from a previously published version with t" +
            "he same PLO, CLO, WLO")]
        public virtual void VerifyACourseVersionCanBeCreatedFromAPreviouslyPublishedVersionWithTheSamePLOCLOWLO()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify a course version can be created from a previously published version with t" +
                    "he same PLO, CLO, WLO", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table16.AddRow(new string[] {
                        "PLO1"});
            table16.AddRow(new string[] {
                        "CLO1"});
            table16.AddRow(new string[] {
                        "CLO2"});
            table16.AddRow(new string[] {
                        "WLO1"});
#line 96
 testRunner.Given("I have the following learning outcomes", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Program Name"});
            table17.AddRow(new string[] {
                        "Program1"});
#line 102
 testRunner.And("I associate \'Course1\' course with the following programs", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table18.AddRow(new string[] {
                        "PLO1"});
#line 105
 testRunner.When("I associate the existing learning outcomes to \'Program1\' program", ((string)(null)), table18, "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table19.AddRow(new string[] {
                        "PLO1"});
#line 108
 testRunner.And("I associate the existing learning outcomes to \'Course1\' course", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table20.AddRow(new string[] {
                        "CLO1"});
            table20.AddRow(new string[] {
                        "CLO2"});
#line 111
 testRunner.And("the outcome \'PLO1\' is supported by the following outcomes", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table21.AddRow(new string[] {
                        "WLO1"});
#line 115
 testRunner.And("the outcome \'CLO1\' is supported by the following outcomes", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description"});
            table22.AddRow(new string[] {
                        "WLO1"});
#line 118
 testRunner.And("I associate the existing learning outcomes to \'Week1\' segment", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table23.AddRow(new string[] {
                        "Course1",
                        "a note"});
#line 121
 testRunner.And("I publish the following courses", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "VersionNumber",
                        "1.0.0.1"});
#line 124
 testRunner.And("I create a new version of \'Course1\' course named \'Course1 v1.0.0.1\' with the foll" +
                    "owing info", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityType",
                        "EntityName",
                        "LearningOutcomes"});
            table25.AddRow(new string[] {
                        "Course",
                        "Course1 v1.0.0.1",
                        "PLO1"});
            table25.AddRow(new string[] {
                        "Segment",
                        "Week1",
                        "WLO1"});
#line 127
 testRunner.Then("I get the entity learning outcomes as follows", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
