// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18010
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BpeProducts.Services.Course.Host.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProgramDeactivation")]
    [NUnit.Framework.CategoryAttribute("Api")]
    public partial class ProgramDeactivationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProgramDeactivation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ProgramDeactivation", "", ProgrammingLanguage.CSharp, new string[] {
                        "Api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Capability"});
            table1.AddRow(new string[] {
                        "EditProgram"});
            table1.AddRow(new string[] {
                        "ViewProgram"});
#line 5
 testRunner.Given("I have the following capabilities", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName",
                        "GraduationRequirements"});
            table2.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default",
                        "requirement one"});
#line 9
 testRunner.And("I have the following programs", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Program is activated by default")]
        public virtual void ProgramIsActivatedByDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Program is activated by default", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "Bachelor of Science"});
            table3.AddRow(new string[] {
                        "Description",
                        "Economics"});
            table3.AddRow(new string[] {
                        "ProgramType",
                        "MA"});
            table3.AddRow(new string[] {
                        "OrganizationId",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
            table3.AddRow(new string[] {
                        "GraduationRequirements",
                        "requirement one"});
            table3.AddRow(new string[] {
                        "IsActivated",
                        "true"});
#line 14
 testRunner.Then("the program \'Bachelor of Science\' contains", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot deactivate unpublished program")]
        public virtual void CannotDeactivateUnpublishedProgram()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot deactivate unpublished program", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 24
 testRunner.When("I deactivate the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("I get \'BadRequest\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can deactivate published program")]
        public virtual void CanDeactivatePublishedProgram()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can deactivate published program", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table4.AddRow(new string[] {
                        "Bachelor of Science",
                        "Blah blah"});
#line 28
 testRunner.When("I publish the following programs", ((string)(null)), table4, "When ");
#line 31
 testRunner.When("I deactivate the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Bachelor of Science"});
            table5.AddRow(new string[] {
                        "Description",
                        "Economics"});
            table5.AddRow(new string[] {
                        "ProgramType",
                        "MA"});
            table5.AddRow(new string[] {
                        "OrganizationId",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
            table5.AddRow(new string[] {
                        "GraduationRequirements",
                        "requirement one"});
            table5.AddRow(new string[] {
                        "VersionNumber",
                        "1.0.0.0"});
            table5.AddRow(new string[] {
                        "IsPublished",
                        "true"});
            table5.AddRow(new string[] {
                        "PublishNote",
                        "Blah blah"});
            table5.AddRow(new string[] {
                        "IsActivated",
                        "false"});
#line 32
 testRunner.Then("the program \'Bachelor of Science\' contains", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can activate deactivated program")]
        public virtual void CanActivateDeactivatedProgram()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can activate deactivated program", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table6.AddRow(new string[] {
                        "Bachelor of Science",
                        "Blah blah"});
#line 44
 testRunner.When("I publish the following programs", ((string)(null)), table6, "When ");
#line 47
 testRunner.And("I deactivate the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("I activate the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Bachelor of Science"});
            table7.AddRow(new string[] {
                        "Description",
                        "Economics"});
            table7.AddRow(new string[] {
                        "ProgramType",
                        "MA"});
            table7.AddRow(new string[] {
                        "OrganizationId",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
            table7.AddRow(new string[] {
                        "GraduationRequirements",
                        "requirement one"});
            table7.AddRow(new string[] {
                        "VersionNumber",
                        "1.0.0.0"});
            table7.AddRow(new string[] {
                        "IsPublished",
                        "true"});
            table7.AddRow(new string[] {
                        "PublishNote",
                        "Blah blah"});
            table7.AddRow(new string[] {
                        "IsActivated",
                        "true"});
#line 49
 testRunner.Then("the program \'Bachelor of Science\' contains", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
