// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18010
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BpeProducts.Services.Course.Host.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProgramAuthorization")]
    [NUnit.Framework.CategoryAttribute("Api")]
    public partial class ProgramAuthorizationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProgramAuthorization.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ProgramAuthorization", "In order to perform CRUD on program, \r\nI would need to have the required permissi" +
                    "on\r\nCreate/Edit/Delete - requires EditProgram capability\r\nView - requires ViewPr" +
                    "ogram capability", ProgrammingLanguage.CSharp, new string[] {
                        "Api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can not create a program unless I have permission to do so.")]
        [NUnit.Framework.TestCaseAttribute("EditProgram", "Created", null)]
        [NUnit.Framework.TestCaseAttribute("", "Forbidden", null)]
        public virtual void ICanNotCreateAProgramUnlessIHavePermissionToDoSo_(string capability, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can not create a program unless I have permission to do so.", exampleTags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given(string.Format("I have the \'{0}\' capability", capability), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName",
                        "GraduationRequirements"});
            table1.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default",
                        "requirement one"});
#line 10
 testRunner.When("I create the following programs", ((string)(null)), table1, "When ");
#line 13
 testRunner.Then(string.Format("I get \'{0}\' response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can view a program when I do have permission.")]
        [NUnit.Framework.TestCaseAttribute("ViewProgram", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("", "Forbidden", null)]
        public virtual void ICanViewAProgramWhenIDoHavePermission_(string capability, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can view a program when I do have permission.", exampleTags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have the \'EditProgram\' capability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName",
                        "GraduationRequirements"});
            table2.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default",
                        "requirement one"});
#line 21
 testRunner.When("I create the following programs", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ObjectType",
                        "ObjectName",
                        "Capability"});
            table3.AddRow(new string[] {
                        "program",
                        "Bachelor of Science",
                        string.Format("{0}", capability)});
#line 24
 testRunner.Given("I have the following object capabilities", ((string)(null)), table3, "Given ");
#line 27
 testRunner.When("I get the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then(string.Format("I get \'{0}\' response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can edit a program when I do have permission.")]
        [NUnit.Framework.TestCaseAttribute("EditProgram", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("", "Forbidden", null)]
        public virtual void ICanEditAProgramWhenIDoHavePermission_(string capability, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can edit a program when I do have permission.", exampleTags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("I have the \'EditProgram\' capability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName",
                        "GraduationRequirements"});
            table4.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default",
                        "requirement one"});
#line 36
 testRunner.When("I create the following programs", ((string)(null)), table4, "When ");
#line 39
 testRunner.When("I am \'TestUser1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ObjectType",
                        "ObjectName",
                        "Capability"});
            table5.AddRow(new string[] {
                        "program",
                        "Bachelor of Science",
                        string.Format("{0}", capability)});
#line 40
 testRunner.Given("I have the following object capabilities", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Name",
                        "Bachelor of Arts"});
            table6.AddRow(new string[] {
                        "Description",
                        "English"});
            table6.AddRow(new string[] {
                        "ProgramType",
                        "BA"});
            table6.AddRow(new string[] {
                        "OrganizationId",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
            table6.AddRow(new string[] {
                        "GraduationRequirements",
                        "requirement one update"});
#line 43
 testRunner.When("I modify the program \'Bachelor of Science\' info to reflect the following", ((string)(null)), table6, "When ");
#line 50
 testRunner.Then(string.Format("I get \'{0}\' response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can delete a program when I do have permission.")]
        [NUnit.Framework.TestCaseAttribute("EditProgram", "NoContent", null)]
        [NUnit.Framework.TestCaseAttribute("", "Forbidden", null)]
        public virtual void ICanDeleteAProgramWhenIDoHavePermission_(string capability, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can delete a program when I do have permission.", exampleTags);
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I have the \'EditProgram\' capability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName",
                        "GraduationRequirements"});
            table7.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default",
                        "requirement one"});
#line 58
 testRunner.When("I create the following programs", ((string)(null)), table7, "When ");
#line 61
 testRunner.When("I am \'TestUser1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ObjectType",
                        "ObjectName",
                        "Capability"});
            table8.AddRow(new string[] {
                        "program",
                        "Bachelor of Science",
                        string.Format("{0}", capability)});
#line 62
 testRunner.Given("I have the following object capabilities", ((string)(null)), table8, "Given ");
#line 65
 testRunner.When("I delete the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then(string.Format("I get \'{0}\' response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can not publish a program unless I have permission to do so.")]
        [NUnit.Framework.TestCaseAttribute("EditProgram", "NoContent", null)]
        [NUnit.Framework.TestCaseAttribute("", "Forbidden", null)]
        public virtual void ICanNotPublishAProgramUnlessIHavePermissionToDoSo_(string capability, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can not publish a program unless I have permission to do so.", exampleTags);
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I have the \'EditProgram\' capability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName",
                        "GraduationRequirements"});
            table9.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default",
                        "requirement one"});
#line 74
 testRunner.When("I create the following programs", ((string)(null)), table9, "When ");
#line 77
 testRunner.When("I am \'TestUser1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ObjectType",
                        "ObjectName",
                        "Capability"});
            table10.AddRow(new string[] {
                        "program",
                        "Bachelor of Science",
                        string.Format("{0}", capability)});
#line 78
 testRunner.Given("I have the following object capabilities", ((string)(null)), table10, "Given ");
#line 81
 testRunner.And(string.Format("I have the \'{0}\' capability", capability), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table11.AddRow(new string[] {
                        "Bachelor of Science",
                        "bala"});
#line 82
 testRunner.When("I publish the following programs", ((string)(null)), table11, "When ");
#line 85
 testRunner.Then(string.Format("I get \'{0}\' response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can not version a program unless I have permission to do so.")]
        [NUnit.Framework.TestCaseAttribute("EditProgram", "Created", null)]
        [NUnit.Framework.TestCaseAttribute("", "Forbidden", null)]
        public virtual void ICanNotVersionAProgramUnlessIHavePermissionToDoSo_(string capability, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can not version a program unless I have permission to do so.", exampleTags);
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given("I have the \'EditProgram\' capability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName",
                        "GraduationRequirements"});
            table12.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default",
                        "requirement one"});
#line 93
 testRunner.When("I create the following programs", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table13.AddRow(new string[] {
                        "Bachelor of Science",
                        "bala"});
#line 96
 testRunner.And("I publish the following programs", ((string)(null)), table13, "And ");
#line 99
 testRunner.When("I am \'TestUser1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "ObjectType",
                        "ObjectName",
                        "Capability"});
            table14.AddRow(new string[] {
                        "program",
                        "Bachelor of Science",
                        string.Format("{0}", capability)});
#line 100
 testRunner.Given("I have the following object capabilities", ((string)(null)), table14, "Given ");
#line 103
 testRunner.And(string.Format("I have the \'{0}\' capability", capability), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "VersionNumber",
                        "1.0.0.1"});
#line 104
 testRunner.When("I create a new version of \'Bachelor of Science\' program named \'Bachelor of Scienc" +
                    "e v2\' with the following info", ((string)(null)), table15, "When ");
#line 107
 testRunner.Then(string.Format("I get \'{0}\' response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can not deactivate a program unless I have permission to do so.")]
        [NUnit.Framework.TestCaseAttribute("EditProgram", "NoContent", null)]
        [NUnit.Framework.TestCaseAttribute("", "Forbidden", null)]
        public virtual void ICanNotDeactivateAProgramUnlessIHavePermissionToDoSo_(string capability, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can not deactivate a program unless I have permission to do so.", exampleTags);
#line 113
this.ScenarioSetup(scenarioInfo);
#line 114
 testRunner.Given("I have the \'EditProgram\' capability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName",
                        "GraduationRequirements"});
            table16.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default",
                        "requirement one"});
#line 115
 testRunner.When("I create the following programs", ((string)(null)), table16, "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table17.AddRow(new string[] {
                        "Bachelor of Science",
                        "Blah blah"});
#line 118
 testRunner.And("I publish the following programs", ((string)(null)), table17, "And ");
#line 121
 testRunner.When("I am \'TestUser1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "ObjectType",
                        "ObjectName",
                        "Capability"});
            table18.AddRow(new string[] {
                        "program",
                        "Bachelor of Science",
                        string.Format("{0}", capability)});
#line 122
 testRunner.Given("I have the following object capabilities", ((string)(null)), table18, "Given ");
#line 125
 testRunner.And(string.Format("I have the \'{0}\' capability", capability), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.When("I deactivate the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then(string.Format("I get \'{0}\' response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can not activate a program unless I have permission to do so.")]
        [NUnit.Framework.TestCaseAttribute("EditProgram", "NoContent", null)]
        [NUnit.Framework.TestCaseAttribute("", "Forbidden", null)]
        public virtual void ICanNotActivateAProgramUnlessIHavePermissionToDoSo_(string capability, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can not activate a program unless I have permission to do so.", exampleTags);
#line 133
this.ScenarioSetup(scenarioInfo);
#line 134
 testRunner.Given("I have the \'EditProgram\' capability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName",
                        "GraduationRequirements"});
            table19.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default",
                        "requirement one"});
#line 135
 testRunner.When("I create the following programs", ((string)(null)), table19, "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table20.AddRow(new string[] {
                        "Bachelor of Science",
                        "Blah blah"});
#line 138
 testRunner.And("I publish the following programs", ((string)(null)), table20, "And ");
#line 141
 testRunner.And("I deactivate the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.When("I am \'TestUser1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "ObjectType",
                        "ObjectName",
                        "Capability"});
            table21.AddRow(new string[] {
                        "program",
                        "Bachelor of Science",
                        string.Format("{0}", capability)});
#line 143
 testRunner.Given("I have the following object capabilities", ((string)(null)), table21, "Given ");
#line 146
 testRunner.And(string.Format("I have the \'{0}\' capability", capability), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.When("I activate the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
 testRunner.Then(string.Format("I get \'{0}\' response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
