// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BpeProducts.Services.Course.Host.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AssessmentToLearningActivity")]
    [NUnit.Framework.CategoryAttribute("Api")]
    public partial class AssessmentToLearningActivityFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AssessmentToLearningActivity.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AssessmentToLearningActivity", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, new string[] {
                        "Api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "COB"});
#line 8
 testRunner.And("the following organizations exist", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Capability"});
            table2.AddRow(new string[] {
                        "CourseCreate"});
            table2.AddRow(new string[] {
                        "CoursePublish"});
            table2.AddRow(new string[] {
                        "CourseView"});
#line 11
 testRunner.And("I have the following capabilities", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationName",
                        "CourseType",
                        "IsTemplate"});
            table3.AddRow(new string[] {
                        "Econ 100",
                        "E100",
                        "Macroeconomics",
                        "COB",
                        "Traditional",
                        "False"});
#line 16
 testRunner.And("I have the following courses", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "Type",
                        "ParentSegment"});
            table4.AddRow(new string[] {
                        "Week 1",
                        "First week is slack time",
                        "TimeSpan",
                        ""});
#line 19
 testRunner.And("I have the following course segments for \'Econ 100\'", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IsGradeable",
                        "IsExtraCredit",
                        "Weight",
                        "MaxPoint"});
            table5.AddRow(new string[] {
                        "Discussion 1",
                        "Discussion",
                        "True",
                        "true",
                        "100",
                        "20"});
#line 22
 testRunner.And("I add the following course learning activities to \'Week 1\' course segment", ((string)(null)), table5, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a learning activity with an assessment")]
        public virtual void CreateALearningActivityWithAnAssessment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a learning activity with an assessment", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Instructions",
                        "AssessmentType",
                        "IsPublished",
                        "VersionNumber"});
            table6.AddRow(new string[] {
                        "Assessment1",
                        "Do this",
                        "Essay",
                        "true",
                        "1.1"});
#line 27
 testRunner.Given("I have the following assessments", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Name",
                        "Discussion 2"});
            table7.AddRow(new string[] {
                        "Type",
                        "Discussion"});
            table7.AddRow(new string[] {
                        "IsGradeable",
                        "True"});
            table7.AddRow(new string[] {
                        "IsExtraCredit",
                        "True"});
            table7.AddRow(new string[] {
                        "Weight",
                        "100"});
            table7.AddRow(new string[] {
                        "MaxPoint",
                        "20"});
            table7.AddRow(new string[] {
                        "ObjectId",
                        "D2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
            table7.AddRow(new string[] {
                        "Assessment",
                        "Assessment1"});
#line 30
 testRunner.When("I add the following learning activity to \'Week 1\' course segment", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IsGradeable",
                        "IsExtraCredit",
                        "Weight",
                        "MaxPoint",
                        "Assessment",
                        "AssessmentType"});
            table8.AddRow(new string[] {
                        "Discussion 1",
                        "Discussion",
                        "True",
                        "true",
                        "100",
                        "20",
                        "",
                        "Custom"});
            table8.AddRow(new string[] {
                        "Discussion 2",
                        "Discussion",
                        "True",
                        "true",
                        "100",
                        "20",
                        "Assessment1",
                        "Essay"});
#line 40
 testRunner.Then("the segment \'Week 1\' should have the following learning activities", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Associate a published assessment to an existing learning activity")]
        public virtual void AssociateAPublishedAssessmentToAnExistingLearningActivity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Associate a published assessment to an existing learning activity", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Instructions",
                        "AssessmentType",
                        "IsPublished",
                        "VersionNumber"});
            table9.AddRow(new string[] {
                        "Assessment1",
                        "Do this",
                        "Essay",
                        "true",
                        "1.1"});
#line 46
 testRunner.Given("I have the following assessments", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Name",
                        "Discussion 1"});
            table10.AddRow(new string[] {
                        "Type",
                        "Custom"});
            table10.AddRow(new string[] {
                        "IsGradeable",
                        "false"});
            table10.AddRow(new string[] {
                        "IsExtraCredit",
                        "false"});
            table10.AddRow(new string[] {
                        "Weight",
                        "100"});
            table10.AddRow(new string[] {
                        "MaxPoint",
                        "100"});
            table10.AddRow(new string[] {
                        "ObjectId",
                        "D2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
            table10.AddRow(new string[] {
                        "Assessment",
                        "Assessment1"});
#line 49
 testRunner.When("I update \'Discussion 1\' learning activity with the following info", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IsGradeable",
                        "IsExtraCredit",
                        "Weight",
                        "MaxPoint",
                        "Assessment",
                        "AssessmentType"});
            table11.AddRow(new string[] {
                        "Discussion 1",
                        "Custom",
                        "false",
                        "False",
                        "100",
                        "100",
                        "Assessment1",
                        "Essay"});
#line 59
 testRunner.Then("the segment \'Week 1\' should have the following learning activities", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Associate a non-existing assessment")]
        public virtual void AssociateANon_ExistingAssessment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Associate a non-existing assessment", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "Name",
                        "Discussion 1"});
            table12.AddRow(new string[] {
                        "Type",
                        "Custom"});
            table12.AddRow(new string[] {
                        "IsGradeable",
                        "false"});
            table12.AddRow(new string[] {
                        "IsExtraCredit",
                        "false"});
            table12.AddRow(new string[] {
                        "Weight",
                        "100"});
            table12.AddRow(new string[] {
                        "MaxPoint",
                        "100"});
            table12.AddRow(new string[] {
                        "ObjectId",
                        "D2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
            table12.AddRow(new string[] {
                        "Assessment",
                        "Non-Existing"});
#line 64
 testRunner.When("I update \'Discussion 1\' learning activity with the following info", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "StatusCode"});
            table13.AddRow(new string[] {
                        "NotFound"});
#line 74
 testRunner.Then("I get the following responses", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
