// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BpeProducts.Services.Course.Host.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CoursePrerequisites")]
    [NUnit.Framework.CategoryAttribute("Api")]
    public partial class CoursePrerequisitesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CoursePreRequisite.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CoursePrerequisites", "As a course creator\r\nI want to be able to declare the set of courses that need to" +
                    " be accomplished prior to a given course\r\nSo that students can be enrolled in th" +
                    "ese courses", ProgrammingLanguage.CSharp, new string[] {
                        "Api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationId",
                        "CourseType",
                        "IsTemplate",
                        "IsPublished"});
            table1.AddRow(new string[] {
                        "Econ 100",
                        "E100",
                        "Macroeconomics",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "Published"});
            table1.AddRow(new string[] {
                        "Econ 200",
                        "E200",
                        "Microeconomics",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "Published"});
            table1.AddRow(new string[] {
                        "Econ 250",
                        "E100",
                        "Intro to Econometrics",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "Published"});
            table1.AddRow(new string[] {
                        "Econ 300",
                        "E100",
                        "Applied Econometrics",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "Published"});
            table1.AddRow(new string[] {
                        "Econ 350",
                        "E350",
                        "Labor Economics",
                        "7DB51BC8-D0CD-44C5-9C67-C64021068B03",
                        "Traditional",
                        "False",
                        "Published"});
            table1.AddRow(new string[] {
                        "Econ 400",
                        "E400",
                        "Advanced Econometrics",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "NotPublished"});
            table1.AddRow(new string[] {
                        "Econ 450",
                        "E100",
                        "Financial Economics",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "NotPublished"});
            table1.AddRow(new string[] {
                        "Math 101",
                        "M101",
                        "Basic mathematics",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "Published"});
            table1.AddRow(new string[] {
                        "Math 150",
                        "M101",
                        "Geometry",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "NotPublished"});
            table1.AddRow(new string[] {
                        "Poly 220",
                        "P220",
                        "Comparative Politics",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "Published"});
            table1.AddRow(new string[] {
                        "Math 200",
                        "M200",
                        "Calculus",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F",
                        "Traditional",
                        "False",
                        "NotPublished"});
#line 8
 testRunner.Given("the following courses are published:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a course prerequisite")]
        public virtual void AddACoursePrerequisite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a course prerequisite", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table2.AddRow(new string[] {
                        "Econ 100"});
            table2.AddRow(new string[] {
                        "Econ 200"});
#line 23
 testRunner.When("I add the following prerequisites to \'Econ 400\'", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "Econ 100"});
            table3.AddRow(new string[] {
                        "Econ 200"});
#line 27
 testRunner.Then("the course \'Econ 400\' should have the following prerequisites", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove a course from the prerequisite list")]
        public virtual void RemoveACourseFromThePrerequisiteList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove a course from the prerequisite list", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "Econ 100"});
            table4.AddRow(new string[] {
                        "Econ 200"});
#line 33
 testRunner.When("I add the following prerequisites to \'Econ 450\'", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "Econ 300"});
            table5.AddRow(new string[] {
                        "Econ 350"});
#line 37
 testRunner.And("I add the following prerequisites to \'Econ 450\'", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "Econ 300"});
            table6.AddRow(new string[] {
                        "Econ 350"});
#line 41
 testRunner.Then("the course \'Econ 400\' should have the following prerequisites", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot add a prerequisite to a course that is published")]
        public virtual void CannotAddAPrerequisiteToACourseThatIsPublished()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot add a prerequisite to a course that is published", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table7.AddRow(new string[] {
                        "Math 101"});
#line 48
 testRunner.When("I add the following prerequisites to \'Math 200\'", ((string)(null)), table7, "When ");
#line 51
 testRunner.Then("I get \'Forbidden\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot add an unpublished prerequisite to a course")]
        public virtual void CannotAddAnUnpublishedPrerequisiteToACourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot add an unpublished prerequisite to a course", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table8.AddRow(new string[] {
                        "Math 150"});
#line 55
 testRunner.When("I add the following prerequisites to \'Math 200\'", ((string)(null)), table8, "When ");
#line 58
 testRunner.Then("I get \'Forbidden\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
