// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18010
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BpeProducts.Services.Course.Host.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SectionCreation")]
    [NUnit.Framework.CategoryAttribute("Api")]
    public partial class SectionCreationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SectionCreation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SectionCreation", "", ProgrammingLanguage.CSharp, new string[] {
                        "Api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Capability"});
            table1.AddRow(new string[] {
                        "CourseCreate"});
            table1.AddRow(new string[] {
                        "CoursePublish"});
            table1.AddRow(new string[] {
                        "CourseView"});
#line 5
 testRunner.Given("I have the following capabilities", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table2.AddRow(new string[] {
                        "asset1"});
            table2.AddRow(new string[] {
                        "asset2"});
            table2.AddRow(new string[] {
                        "asset3"});
#line 10
 testRunner.And("I have the following assets", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "PublishNote"});
            table3.AddRow(new string[] {
                        "asset1",
                        "published"});
            table3.AddRow(new string[] {
                        "asset2",
                        "published"});
            table3.AddRow(new string[] {
                        "asset3",
                        "published"});
#line 15
 testRunner.And("Published the following assets", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "COB"});
#line 20
  testRunner.And("the following organizations exist", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationName",
                        "Credit",
                        "MetaData",
                        "ExtensionAssets"});
            table5.AddRow(new string[] {
                        "Math 101",
                        "M101",
                        "Basic mathematics",
                        "COB",
                        "12",
                        "{someData}",
                        "asset1,asset2"});
#line 23
 testRunner.And("I have the following courses", ((string)(null)), table5, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot create a section from a course that is not published")]
        public virtual void CannotCreateASectionFromACourseThatIsNotPublished()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create a section from a course that is not published", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table6.AddRow(new string[] {
                        "Math 101",
                        "Math 334",
                        "MATH334.ABC",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2014"});
#line 28
 testRunner.When("I create the following sections", ((string)(null)), table6, "When ");
#line 31
 testRunner.Then("I get \'BadRequest\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can create a section from a course that is published")]
        public virtual void CanCreateASectionFromACourseThatIsPublished()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create a section from a course that is published", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table7.AddRow(new string[] {
                        "Math 101",
                        "published"});
#line 34
 testRunner.When("I publish the following courses", ((string)(null)), table7, "When ");
#line 37
 testRunner.And("The section service returns \'Created\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table8.AddRow(new string[] {
                        "Math 101",
                        "Math 334",
                        "MATH334.ABC",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2014"});
#line 38
 testRunner.And("I create the following sections", ((string)(null)), table8, "And ");
#line 41
 testRunner.Then("I get \'Created\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a section from a course returns status of section service")]
        public virtual void CreateASectionFromACourseReturnsStatusOfSectionService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a section from a course returns status of section service", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table9.AddRow(new string[] {
                        "Math 101",
                        "published"});
#line 44
 testRunner.When("I publish the following courses", ((string)(null)), table9, "When ");
#line 47
 testRunner.And("The section service returns \'Forbidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table10.AddRow(new string[] {
                        "Math 101",
                        "Math 334",
                        "MATH334.ABC",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2014"});
#line 48
 testRunner.And("I create the following sections", ((string)(null)), table10, "And ");
#line 51
 testRunner.Then("I get \'Forbidden\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot create a section from a deactivated course")]
        public virtual void CannotCreateASectionFromADeactivatedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create a section from a deactivated course", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table11.AddRow(new string[] {
                        "Math 101",
                        "published"});
#line 54
 testRunner.When("I publish the following courses", ((string)(null)), table11, "When ");
#line 57
 testRunner.When("I deactivate the course \'Math 101\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table12.AddRow(new string[] {
                        "Math 101",
                        "Math 334",
                        "MATH334.ABC",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2014"});
#line 58
 testRunner.And("I create the following sections", ((string)(null)), table12, "And ");
#line 61
 testRunner.Then("I get \'BadRequest\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can create a section by course code from a course that is published and course co" +
            "de is unique")]
        public virtual void CanCreateASectionByCourseCodeFromACourseThatIsPublishedAndCourseCodeIsUnique()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create a section by course code from a course that is published and course co" +
                    "de is unique", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationName",
                        "Credit",
                        "MetaData",
                        "ExtensionAssets"});
            table13.AddRow(new string[] {
                        "Math 103",
                        "M103",
                        "Basic mathematics",
                        "COB",
                        "12",
                        "{someData}",
                        "asset1,asset2"});
#line 64
 testRunner.Given("I have the following courses for unique code", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table14.AddRow(new string[] {
                        "Math 103",
                        "published"});
#line 67
 testRunner.When("I publish the following courses", ((string)(null)), table14, "When ");
#line 70
 testRunner.And("The section service returns \'Created\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table15.AddRow(new string[] {
                        "Math 103",
                        "Math 334",
                        "M103",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2015"});
#line 71
 testRunner.And("I create the following sections by course code", ((string)(null)), table15, "And ");
#line 74
 testRunner.Then("I get \'Created\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot create a section by course code from a course that is not published")]
        public virtual void CannotCreateASectionByCourseCodeFromACourseThatIsNotPublished()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create a section by course code from a course that is not published", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationName",
                        "Credit",
                        "MetaData",
                        "ExtensionAssets"});
            table16.AddRow(new string[] {
                        "Math 103",
                        "M103",
                        "Basic mathematics",
                        "COB",
                        "12",
                        "{someData}",
                        "asset1,asset2"});
#line 77
 testRunner.Given("I have the following courses for unique code", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table17.AddRow(new string[] {
                        "Math 103",
                        "Math 334",
                        "M103",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2014"});
#line 80
 testRunner.When("I create the following sections by course code", ((string)(null)), table17, "When ");
#line 83
 testRunner.Then("I get \'BadRequest\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a section by course code from a course returns status of section service")]
        public virtual void CreateASectionByCourseCodeFromACourseReturnsStatusOfSectionService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a section by course code from a course returns status of section service", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationName",
                        "Credit",
                        "MetaData",
                        "ExtensionAssets"});
            table18.AddRow(new string[] {
                        "Math 103",
                        "M103",
                        "Basic mathematics",
                        "COB",
                        "12",
                        "{someData}",
                        "asset1,asset2"});
#line 86
 testRunner.Given("I have the following courses for unique code", ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table19.AddRow(new string[] {
                        "Math 103",
                        "published"});
#line 89
 testRunner.When("I publish the following courses", ((string)(null)), table19, "When ");
#line 92
 testRunner.And("The section service returns \'Forbidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table20.AddRow(new string[] {
                        "Math 103",
                        "Math 334",
                        "M103",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2014"});
#line 93
 testRunner.And("I create the following sections by course code", ((string)(null)), table20, "And ");
#line 96
 testRunner.Then("I get \'Forbidden\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot create a section by course code from a deactivated course")]
        public virtual void CannotCreateASectionByCourseCodeFromADeactivatedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create a section by course code from a deactivated course", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationName",
                        "Credit",
                        "MetaData",
                        "ExtensionAssets"});
            table21.AddRow(new string[] {
                        "Math 103",
                        "M103",
                        "Basic mathematics",
                        "COB",
                        "12",
                        "{someData}",
                        "asset1,asset2"});
#line 99
 testRunner.Given("I have the following courses for unique code", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table22.AddRow(new string[] {
                        "Math 103",
                        "published"});
#line 102
 testRunner.When("I publish the following courses", ((string)(null)), table22, "When ");
#line 105
 testRunner.When("I deactivate the course \'Math 103\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table23.AddRow(new string[] {
                        "Math 103",
                        "Math 334",
                        "M103",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2014"});
#line 106
 testRunner.And("I create the following sections by course code", ((string)(null)), table23, "And ");
#line 109
 testRunner.Then("I get \'BadRequest\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot create a section by course code that course code is not unique")]
        public virtual void CannotCreateASectionByCourseCodeThatCourseCodeIsNotUnique()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create a section by course code that course code is not unique", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Description",
                        "OrganizationName",
                        "Credit",
                        "MetaData",
                        "ExtensionAssets"});
            table24.AddRow(new string[] {
                        "Math 103",
                        "M103",
                        "Basic mathematics",
                        "COB",
                        "12",
                        "{someData}",
                        "asset1,asset2"});
            table24.AddRow(new string[] {
                        "Math 104",
                        "M103",
                        "Basic mathematics",
                        "COB",
                        "10",
                        "{someData}",
                        "asset1"});
#line 112
 testRunner.Given("I have the following courses for unique code", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Note"});
            table25.AddRow(new string[] {
                        "Math 103",
                        "published"});
#line 116
 testRunner.When("I publish the following courses", ((string)(null)), table25, "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table26.AddRow(new string[] {
                        "Math 103",
                        "Math 334",
                        "M103",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2015"});
#line 119
 testRunner.And("I create the following sections by course code", ((string)(null)), table26, "And ");
#line 122
 testRunner.Then("I get \'BadRequest\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot create a section by course code that course code is not exist")]
        public virtual void CannotCreateASectionByCourseCodeThatCourseCodeIsNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create a section by course code that course code is not exist", ((string[])(null)));
#line 124
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "CourseName",
                        "Name",
                        "CourseCode",
                        "SectionCode",
                        "StartDate",
                        "EndDate"});
            table27.AddRow(new string[] {
                        "Math 101",
                        "Math 334",
                        "M103",
                        "MATH334.ABCSectionCode",
                        "2/15/2014",
                        "6/15/2015"});
#line 125
 testRunner.When("I create the following sections by course code", ((string)(null)), table27, "When ");
#line 128
 testRunner.Then("I get \'NotFound\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
