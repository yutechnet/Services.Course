// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18047
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BpeProducts.Services.Course.Host.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CourseVersioning")]
    [NUnit.Framework.CategoryAttribute("Api")]
    public partial class CourseVersioningFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CourseVersioning.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CourseVersioning", "In order to allow continuous enhancement of course\r\nAs a course builder\r\nI want t" +
                    "o version the course", ProgrammingLanguage.CSharp, new string[] {
                        "Api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "English 1010"});
            table1.AddRow(new string[] {
                        "Code",
                        "ENG101"});
            table1.AddRow(new string[] {
                        "Description",
                        "Ranji\'s awesome English class"});
            table1.AddRow(new string[] {
                        "TenantId",
                        "1"});
#line 8
 testRunner.Given("I create the following course", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a default version")]
        public virtual void CreateADefaultVersion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a default version", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 16
 testRunner.When("I retrieve \'ENG101\' course", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Name",
                        "English 1010"});
            table2.AddRow(new string[] {
                        "Code",
                        "ENG101"});
            table2.AddRow(new string[] {
                        "Description",
                        "Ranji\'s awesome English class"});
            table2.AddRow(new string[] {
                        "VersionNumber",
                        "1.0.0.0"});
#line 17
 testRunner.Then("the course should have the following info", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit a course version")]
        public virtual void EditACourseVersion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit a course version", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "English 10101"});
            table3.AddRow(new string[] {
                        "Code",
                        "ENG101"});
            table3.AddRow(new string[] {
                        "Description",
                        "Ranji\'s terrible English class"});
            table3.AddRow(new string[] {
                        "TenantId",
                        "1"});
#line 25
 testRunner.When("I update \'ENG101\' course with the following info", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Name",
                        "English 10101"});
            table4.AddRow(new string[] {
                        "Code",
                        "ENG101"});
            table4.AddRow(new string[] {
                        "Description",
                        "Ranji\'s terrible English class"});
            table4.AddRow(new string[] {
                        "VersionNumber",
                        "1.0.0.0"});
#line 31
 testRunner.Then("the course \'ENG101\' should have the following info", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publish a course version")]
        public virtual void PublishACourseVersion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publish a course version", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "PublishNote",
                        "Blah blah"});
            table5.AddRow(new string[] {
                        "VersionNumber",
                        "1.1.1.1"});
#line 39
 testRunner.When("I publish \'ENG101\' course with the following info", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Name",
                        "English 1010"});
            table6.AddRow(new string[] {
                        "Code",
                        "ENG101"});
            table6.AddRow(new string[] {
                        "Description",
                        "Ranji\'s awesome English class"});
            table6.AddRow(new string[] {
                        "VersionNumber",
                        "1.1.1.1"});
            table6.AddRow(new string[] {
                        "IsPublished",
                        "true"});
            table6.AddRow(new string[] {
                        "PublishNote",
                        "Blah blah"});
#line 43
 testRunner.Then("the course \'ENG101\' should have the following info", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Published version cannot be modified")]
        public virtual void PublishedVersionCannotBeModified()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Published version cannot be modified", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "PublishNote",
                        "Blah blah"});
            table7.AddRow(new string[] {
                        "VersionNumber",
                        "1.1.1.1"});
#line 53
 testRunner.Given("I publish \'ENG101\' course with the following info", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "Name",
                        "English 10101"});
            table8.AddRow(new string[] {
                        "Code",
                        "ENG101"});
            table8.AddRow(new string[] {
                        "Description",
                        "Ranji\'s terrible English class"});
            table8.AddRow(new string[] {
                        "TenantId",
                        "1"});
#line 57
 testRunner.When("I update \'ENG101\' course with the following info", ((string)(null)), table8, "When ");
#line 63
 testRunner.Then("I get \'Forbidden\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Published version cannot be deleted")]
        public virtual void PublishedVersionCannotBeDeleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Published version cannot be deleted", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "PublishNote",
                        "Blah blah"});
#line 66
 testRunner.Given("I publish \'ENG101\' course with the following info", ((string)(null)), table9, "Given ");
#line 69
 testRunner.When("I delete \'ENG101\' course", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("I get \'Forbidden\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a course version from a previously-published version")]
        public virtual void CreateACourseVersionFromAPreviously_PublishedVersion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a course version from a previously-published version", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "PublishNote",
                        "Blah blah"});
            table10.AddRow(new string[] {
                        "VersionNumber",
                        "1.1.0.0"});
#line 73
 testRunner.Given("I publish \'ENG101\' course with the following info", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "VersionNumber",
                        "2.0a"});
#line 77
 testRunner.When("I create a new version of \'ENG101\' with the following info", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "Name",
                        "English 1010"});
            table12.AddRow(new string[] {
                        "Code",
                        "ENG101"});
            table12.AddRow(new string[] {
                        "Description",
                        "Ranji\'s awesome English class"});
            table12.AddRow(new string[] {
                        "VersionNumber",
                        "2.0a"});
            table12.AddRow(new string[] {
                        "IsPublished",
                        "false"});
#line 80
 testRunner.Then("the course \'ENG101\' should have the following info", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot publish the same version twice")]
        public virtual void CannotPublishTheSameVersionTwice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot publish the same version twice", ((string[])(null)));
#line 88
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "PublishNote",
                        "Blah blah"});
            table13.AddRow(new string[] {
                        "VersionNumber",
                        "1.0.0.0"});
#line 89
 testRunner.Given("I publish \'ENG101\' course with the following info", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "VersionNumber",
                        "1.0.0.0"});
#line 93
 testRunner.When("I create a new version of \'ENG101\' with the following info", ((string)(null)), table14, "When ");
#line 96
 testRunner.Then("I get \'Conflict\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
