// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BpeProducts.Services.Course.Host.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProgramCreation")]
    [NUnit.Framework.CategoryAttribute("Api")]
    public partial class ProgramCreationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProgramCreation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ProgramCreation", "In order to publish a program\r\nAs a program builder\r\nI want to create, edit and d" +
                    "elete a program", ProgrammingLanguage.CSharp, new string[] {
                        "Api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a basic program")]
        public virtual void CreateABasicProgram()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a basic program", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName"});
            table1.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default"});
#line 8
 testRunner.Given("I have the following programs", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Name",
                        "Bachelor of Science"});
            table2.AddRow(new string[] {
                        "Description",
                        "Economics"});
            table2.AddRow(new string[] {
                        "ProgramType",
                        "MA"});
            table2.AddRow(new string[] {
                        "OrganizationId",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
#line 11
 testRunner.Then("the program \'Bachelor of Science\' contains", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Modify a program")]
        public virtual void ModifyAProgram()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Modify a program", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName"});
            table3.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default"});
#line 19
 testRunner.Given("I have the following programs", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Name",
                        "Bachelor of Arts"});
            table4.AddRow(new string[] {
                        "Description",
                        "English"});
            table4.AddRow(new string[] {
                        "ProgramType",
                        "BA"});
            table4.AddRow(new string[] {
                        "OrganizationId",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
#line 22
 testRunner.When("I modify the program \'Bachelor of Science\' info to reflect the following", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Name",
                        "Bachelor of Arts"});
            table5.AddRow(new string[] {
                        "Description",
                        "English"});
            table5.AddRow(new string[] {
                        "ProgramType",
                        "BA"});
            table5.AddRow(new string[] {
                        "OrganizationId",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
#line 28
 testRunner.Then("the program \'Bachelor of Science\' contains", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a program")]
        public virtual void DeleteAProgram()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a program", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName"});
            table6.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "BA",
                        "Default"});
#line 36
 testRunner.Given("I have the following programs", ((string)(null)), table6, "Given ");
#line 39
 testRunner.When("I delete the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.And("I get the program \'Bachelor of Science\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.Then("I get \'NotFound\' response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all programs")]
        public virtual void GetAllPrograms()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all programs", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName"});
            table7.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default"});
            table7.AddRow(new string[] {
                        "Bachelor of Arts",
                        "Philosophy",
                        "AA",
                        "Default"});
#line 44
 testRunner.Given("I have the following programs", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName"});
            table8.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default"});
            table8.AddRow(new string[] {
                        "Bachelor of Arts",
                        "Philosophy",
                        "AA",
                        "Default"});
#line 48
 testRunner.Then("I have the following programs", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unable to create program due to missing info")]
        public virtual void UnableToCreateProgramDueToMissingInfo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to create program due to missing info", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName"});
            table9.AddRow(new string[] {
                        "Bachelor of Science",
                        "",
                        "MA",
                        "Default"});
            table9.AddRow(new string[] {
                        "",
                        "Economics",
                        "MA",
                        "Default"});
#line 54
 testRunner.When("I attempt to create the following programs", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "StatusCode"});
            table10.AddRow(new string[] {
                        "BadRequest"});
            table10.AddRow(new string[] {
                        "BadRequest"});
#line 58
 testRunner.Then("I get the following responses", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for programs")]
        public virtual void SearchForPrograms()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for programs", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationName"});
            table11.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "Default"});
            table11.AddRow(new string[] {
                        "Bachelor of Art",
                        "Art program",
                        "BA",
                        "Default"});
#line 64
 testRunner.Given("I have the following programs", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "ProgramType",
                        "OrganizationId"});
            table12.AddRow(new string[] {
                        "Bachelor of Science",
                        "Economics",
                        "MA",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
            table12.AddRow(new string[] {
                        "Bachelor of Art",
                        "Art program",
                        "BA",
                        "E2DF063D-E2A1-4F83-9BE0-218EC676C05F"});
#line 68
 testRunner.Then("the organization with \'E2DF063D-E2A1-4F83-9BE0-218EC676C05F\' id has the following" +
                    " programs", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
